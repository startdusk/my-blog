(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{308:function(t,s,a){t.exports=a.p+"assets/img/2020-03-02module.256c95c6.png"},309:function(t,s,a){t.exports=a.p+"assets/img/2020-03-02run-result.622c587c.png"},310:function(t,s,a){t.exports=a.p+"assets/img/2020-03-02dir.91368a32.png"},311:function(t,s,a){t.exports=a.p+"assets/img/2020-03-16restart-result1.efc5e03d.png"},312:function(t,s,a){t.exports=a.p+"assets/img/2020-03-16restart-result2.6d78f816.png"},350:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"golang：使用-air-热重启"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#golang：使用-air-热重启"}},[t._v("#")]),t._v(" Golang：使用 air 热重启")]),t._v(" "),n("p",[t._v("在 Web 开发中，热重启在很多地方都会用到，它能极大提升开发效率，在我们修改完代码后保存，就能自动重启运行得到最新的代码的运行结果，比如前端开发的 HMR 就是一个典型的例子。"),n("br")]),t._v(" "),n("h3",{attrs:{id:"go-语言中的热重启"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#go-语言中的热重启"}},[t._v("#")]),t._v(" Go 语言中的热重启")]),t._v(" "),n("p",[t._v("在 Go 语言开发中实现热重启，推荐使用 "),n("a",{attrs:{href:"https://github.com/cosmtrek/air",target:"_blank",rel:"noopener noreferrer"}},[t._v("air"),n("OutboundLink")],1),t._v(" ，自 Go1.4 出来，官方就推荐使用 Go Modules 管理依赖，来进行模块化开发，那么我们就使用 Go Modules 构建我们的项目(注意：我使用的版本是 Go1.3)。首先创建一个项目目录如: go-restart ，然后进入目录，在该目录下执行终端命令初始化 Go Modules：")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("go mod init github.com/startdusk/go-restart\n")])])]),n("blockquote",[n("p",[t._v("注意 github.com/startdusk/go-restart 只是一个模块名，你可以把它命名成其他的命名")])]),t._v(" "),n("p",[t._v("然后就会在目录下生成一个 go.mod 文件")]),t._v(" "),n("center",[n("img",{staticStyle:{zoom:"50%"},attrs:{src:a(308),alt:""}})]),t._v(" "),n("p",[t._v("然后我们安装 "),n("a",{attrs:{href:"https://github.com/cosmtrek/air",target:"_blank",rel:"noopener noreferrer"}},[t._v("air"),n("OutboundLink")],1),t._v(" (注意：还是在当前目录下执行)")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("go get -v -u github.com/cosmtrek/air\n")])])]),n("p",[t._v("安装完成后，在终端执行 air ，有一下输出即为安装成功：")]),t._v(" "),n("center",[n("img",{staticStyle:{zoom:"50%"},attrs:{src:a(309),alt:""}})]),t._v("\n我们先创建一个 main.go 文件，写点简单代码：\n"),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// main.go")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    fmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"air test"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("到这里，我们还需要创建一个 .air.conf\n的配置文件(.air.conf 是默认命名)。\n可以从 air 项目中的 "),n("a",{attrs:{href:"https://github.com/cosmtrek/air/blob/master/air_example.conf",target:"_blank",rel:"noopener noreferrer"}},[t._v("air_example.conf"),n("OutboundLink")],1),t._v(" 复制配置内容，进行一些修改。\n有几个要注意的地方："),n("br")]),t._v(" "),n("ul",[n("li",[t._v("1.[build] 下的 cmd 配置默认是 go build -o ./tmp/main .，很可能你需要修改，比我当前的项目就必须修改为 go build -o ./tmp/main github.com/startdusk/go-restart/main.go")]),t._v(" "),n("li",[t._v("2.include_ext 和 exclude_dir 是配置避免监控不必要的文件和目录")]),t._v(" "),n("li",[t._v("3.如果该项目有版本管理如 git ，要把 tmp 目录加入 .gitignore 中(因为运行 air 会生成的文件放在 tmp 文件夹中)")]),t._v(" "),n("li",[t._v("4.如果出现 watch error, open tool many files…，说明要监控的文件太多，一方面确保修改了了 include_ext 和 exclude_dir，另一方面可以通过 ulimit -n 5000 调大进程允许打开的文件数")])]),t._v(" "),n("p",[t._v("那么修改后的 .air.conf 文件就变为了：")]),t._v(" "),n("div",{staticClass:"language-toml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-toml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Config file for [Air](https://github.com/cosmtrek/air) in TOML format")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Working directory")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# . or absolute path, please note that the directories following must be under root.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key property"}},[t._v("root")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"."')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key property"}},[t._v("tmp_dir")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tmp"')]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token table class-name"}},[t._v("build")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Just plain old shell command. You could use `make` as well.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key property"}},[t._v("cmd")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"go build -o ./tmp/main github.com/startdusk/go-restart/main.go"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Binary file yields from `cmd`.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key property"}},[t._v("bin")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tmp/main"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Customize binary.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key property"}},[t._v("full_bin")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"APP_ENV=dev APP_USER=air ./tmp/main"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Watch these filename extensions.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key property"}},[t._v("include_ext")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"go"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tpl"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tmpl"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"html"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Ignore these filename extensions or directories.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key property"}},[t._v("exclude_dir")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"assets"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tmp"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"vendor"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"frontend/node_modules"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Watch these directories if you specified.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key property"}},[t._v("include_dir")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Exclude files.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key property"}},[t._v("exclude_file")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# It's not necessary to trigger build each time file changes if it's too frequent.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key property"}},[t._v("delay")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ms")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Stop to run old binary when build errors occur.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key property"}},[t._v("stop_on_error")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This log file places in your tmp_dir.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key property"}},[t._v("log")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"air_errors.log"')]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token table class-name"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Show log time")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key property"}},[t._v("time")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token table class-name"}},[t._v("color")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Customize each part's color. If no color found, use the raw app log.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key property"}},[t._v("main")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"magenta"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key property"}},[t._v("watcher")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cyan"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key property"}},[t._v("build")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"yellow"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key property"}},[t._v("runner")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"green"')]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token table class-name"}},[t._v("misc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Delete tmp directory on exit")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key property"}},[t._v("clean_on_exit")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])]),n("p",[t._v("此时目录结构为：")]),t._v(" "),n("center",[n("img",{staticStyle:{zoom:"50%"},attrs:{src:a(310),alt:""}})]),t._v("\n好了，到此我们可以在命令行运行代码：\n"),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("air\n")])])]),n("p",[t._v("然后输出：")]),t._v(" "),n("center",[n("img",{staticStyle:{zoom:"50%"},attrs:{src:a(311),alt:""}})]),t._v(" "),n("p",[t._v("程序成功运行，并且 air 在监听文件的变化\n，那我们尝试下改动下代码：")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// main.go")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    fmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"air test"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    fmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"air listen"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("然后控制台输出：")]),t._v(" "),n("center",[n("img",{staticStyle:{zoom:"50%"},attrs:{src:a(312),alt:""}})]),t._v(" "),n("p",[t._v("查看结果，air 成功监听到了文件的变化，并重新运行了程序。")]),t._v(" "),n("p",[t._v("那么，上面的粉红色的输出一些异常，大家可以去看一下这个"),n("a",{attrs:{href:"https://github.com/cosmtrek/air/issues/53",target:"_blank",rel:"noopener noreferrer"}},[t._v("issue #53"),n("OutboundLink")],1),t._v("，windows 平台会出现这个问题，但不是很影响使用。但这个 air 目前还不能配合 VSCode 热重启加调试模式使用(如 nodejs 的 nodemon+VSCode 是可以实现热重启加调试模式启动的)，有点遗憾。")])],1)}),[],!1,null,null,null);s.default=e.exports}}]);